// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using prn_job_manager.Models;

#nullable disable

namespace prn_job_manager.Migrations
{
    [DbContext(typeof(cron_jobContext))]
    [Migration("20230326093344_UpdateDatabase")]
    partial class UpdateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("prn_job_manager.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Expression")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("expression");

                    b.Property<string>("Header")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("header");

                    b.Property<string>("Method")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("method");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Payload")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("payload");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Webhook")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("webhook");

                    b.HasKey("JobId");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<int?>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<string>("Output")
                        .HasColumnType("text")
                        .HasColumnName("output");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("LogId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzBlobTrigger", b =>
                {
                    b.Property<byte[]>("BlobData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("BLOB_DATA");

                    b.Property<string>("SchedName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_NAME");

                    b.HasIndex("SchedName", "TriggerName", "TriggerGroup");

                    b.ToTable("QRTZ_BLOB_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzCalendar", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("CalendarName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CALENDAR_NAME");

                    b.Property<byte[]>("Calendar")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("CALENDAR");

                    b.HasKey("SchedName", "CalendarName");

                    b.ToTable("QRTZ_CALENDARS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzCronTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("CRON_EXPRESSION");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("TIME_ZONE_ID");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.HasIndex(new[] { "SchedName", "TriggerName", "TriggerGroup" }, "IX_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS");

                    b.ToTable("QRTZ_CRON_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzFiredTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("EntryId")
                        .HasMaxLength(95)
                        .IsUnicode(false)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("ENTRY_ID");

                    b.Property<long>("FiredTime")
                        .HasColumnType("bigint")
                        .HasColumnName("FIRED_TIME");

                    b.Property<string>("InstanceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("INSTANCE_NAME");

                    b.Property<string>("IsNonconcurrent")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("IS_NONCONCURRENT");

                    b.Property<string>("JobGroup")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("JobName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("JOB_NAME");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY");

                    b.Property<string>("RequestsRecovery")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("REQUESTS_RECOVERY");

                    b.Property<long>("SchedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("SCHED_TIME");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("STATE");

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_NAME");

                    b.HasKey("SchedName", "EntryId");

                    b.ToTable("QRTZ_FIRED_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzJobDetail", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("JobName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("JOB_NAME");

                    b.Property<string>("JobGroup")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IsDurable")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("IS_DURABLE");

                    b.Property<string>("IsNonconcurrent")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("IS_NONCONCURRENT");

                    b.Property<string>("IsUpdateData")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("IS_UPDATE_DATA");

                    b.Property<string>("JobClassName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("JOB_CLASS_NAME");

                    b.Property<byte[]>("JobData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("JOB_DATA");

                    b.Property<string>("RequestsRecovery")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("REQUESTS_RECOVERY");

                    b.HasKey("SchedName", "JobName", "JobGroup");

                    b.ToTable("QRTZ_JOB_DETAILS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzLock", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("LockName")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("LOCK_NAME");

                    b.HasKey("SchedName", "LockName");

                    b.ToTable("QRTZ_LOCKS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzPausedTriggerGrp", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.HasKey("SchedName", "TriggerGroup");

                    b.ToTable("QRTZ_PAUSED_TRIGGER_GRPS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzSchedulerState", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("InstanceName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("INSTANCE_NAME");

                    b.Property<long>("CheckinInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("CHECKIN_INTERVAL");

                    b.Property<long>("LastCheckinTime")
                        .HasColumnType("bigint")
                        .HasColumnName("LAST_CHECKIN_TIME");

                    b.HasKey("SchedName", "InstanceName");

                    b.ToTable("QRTZ_SCHEDULER_STATE", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzSimpleTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<long>("RepeatCount")
                        .HasColumnType("bigint")
                        .HasColumnName("REPEAT_COUNT");

                    b.Property<long>("RepeatInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("REPEAT_INTERVAL");

                    b.Property<long>("TimesTriggered")
                        .HasColumnType("bigint")
                        .HasColumnName("TIMES_TRIGGERED");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.HasIndex(new[] { "SchedName", "TriggerName", "TriggerGroup" }, "IX_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS");

                    b.ToTable("QRTZ_SIMPLE_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzSimpropTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("BoolProp1")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("BOOL_PROP_1");

                    b.Property<string>("BoolProp2")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("BOOL_PROP_2");

                    b.Property<decimal?>("DecProp1")
                        .HasColumnType("numeric(13,4)")
                        .HasColumnName("DEC_PROP_1");

                    b.Property<decimal?>("DecProp2")
                        .HasColumnType("numeric(13,4)")
                        .HasColumnName("DEC_PROP_2");

                    b.Property<int?>("IntProp1")
                        .HasColumnType("int")
                        .HasColumnName("INT_PROP_1");

                    b.Property<int?>("IntProp2")
                        .HasColumnType("int")
                        .HasColumnName("INT_PROP_2");

                    b.Property<long?>("LongProp1")
                        .HasColumnType("bigint")
                        .HasColumnName("LONG_PROP_1");

                    b.Property<long?>("LongProp2")
                        .HasColumnType("bigint")
                        .HasColumnName("LONG_PROP_2");

                    b.Property<string>("StrProp1")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("STR_PROP_1");

                    b.Property<string>("StrProp2")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("STR_PROP_2");

                    b.Property<string>("StrProp3")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("STR_PROP_3");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.HasIndex(new[] { "SchedName", "TriggerName", "TriggerGroup" }, "IX_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS");

                    b.ToTable("QRTZ_SIMPROP_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzTrigger", b =>
                {
                    b.Property<string>("SchedName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("SCHED_NAME");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_NAME");

                    b.Property<string>("TriggerGroup")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TRIGGER_GROUP");

                    b.Property<string>("CalendarName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CALENDAR_NAME");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<long?>("EndTime")
                        .HasColumnType("bigint")
                        .HasColumnName("END_TIME");

                    b.Property<byte[]>("JobData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("JOB_DATA");

                    b.Property<string>("JobGroup")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("JOB_GROUP");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("JOB_NAME");

                    b.Property<short?>("MisfireInstr")
                        .HasColumnType("smallint")
                        .HasColumnName("MISFIRE_INSTR");

                    b.Property<long?>("NextFireTime")
                        .HasColumnType("bigint")
                        .HasColumnName("NEXT_FIRE_TIME");

                    b.Property<long?>("PrevFireTime")
                        .HasColumnType("bigint")
                        .HasColumnName("PREV_FIRE_TIME");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint")
                        .HasColumnName("START_TIME");

                    b.Property<string>("TriggerState")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("TRIGGER_STATE");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("TRIGGER_TYPE");

                    b.HasKey("SchedName", "TriggerName", "TriggerGroup");

                    b.HasIndex("SchedName", "JobName", "JobGroup");

                    b.HasIndex(new[] { "SchedName", "TriggerName", "TriggerGroup" }, "IX_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS");

                    b.ToTable("QRTZ_TRIGGERS", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.UserJob", b =>
                {
                    b.Property<int?>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Job", (string)null);
                });

            modelBuilder.Entity("prn_job_manager.Models.Log", b =>
                {
                    b.HasOne("prn_job_manager.Models.Job", "Job")
                        .WithMany("Logs")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__Log__job_id__2B3F6F97");

                    b.HasOne("prn_job_manager.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Log__user_id__2C3393D0");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzBlobTrigger", b =>
                {
                    b.HasOne("prn_job_manager.Models.QrtzTrigger", "QrtzTrigger")
                        .WithMany()
                        .HasForeignKey("SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_BLOB_TRIGGERS_QRTZ_TRIGGERS");

                    b.Navigation("QrtzTrigger");
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzCronTrigger", b =>
                {
                    b.HasOne("prn_job_manager.Models.QrtzTrigger", "QrtzTrigger")
                        .WithOne("QrtzCronTrigger")
                        .HasForeignKey("prn_job_manager.Models.QrtzCronTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS");

                    b.Navigation("QrtzTrigger");
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzSimpleTrigger", b =>
                {
                    b.HasOne("prn_job_manager.Models.QrtzTrigger", "QrtzTrigger")
                        .WithOne("QrtzSimpleTrigger")
                        .HasForeignKey("prn_job_manager.Models.QrtzSimpleTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS");

                    b.Navigation("QrtzTrigger");
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzSimpropTrigger", b =>
                {
                    b.HasOne("prn_job_manager.Models.QrtzTrigger", "QrtzTrigger")
                        .WithOne("QrtzSimpropTrigger")
                        .HasForeignKey("prn_job_manager.Models.QrtzSimpropTrigger", "SchedName", "TriggerName", "TriggerGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS");

                    b.Navigation("QrtzTrigger");
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzTrigger", b =>
                {
                    b.HasOne("prn_job_manager.Models.QrtzJobDetail", "QrtzJobDetail")
                        .WithMany("QrtzTriggers")
                        .HasForeignKey("SchedName", "JobName", "JobGroup")
                        .IsRequired()
                        .HasConstraintName("FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS");

                    b.Navigation("QrtzJobDetail");
                });

            modelBuilder.Entity("prn_job_manager.Models.UserJob", b =>
                {
                    b.HasOne("prn_job_manager.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__User_Job__job_id__286302EC");

                    b.HasOne("prn_job_manager.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__User_Job__user_i__276EDEB3");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("prn_job_manager.Models.Job", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzJobDetail", b =>
                {
                    b.Navigation("QrtzTriggers");
                });

            modelBuilder.Entity("prn_job_manager.Models.QrtzTrigger", b =>
                {
                    b.Navigation("QrtzCronTrigger");

                    b.Navigation("QrtzSimpleTrigger");

                    b.Navigation("QrtzSimpropTrigger");
                });

            modelBuilder.Entity("prn_job_manager.Models.User", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
